# -*- coding: utf-8 -*-
"""CrowS_Pairs_bias.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1KSZz7gWKwi_3gpDuA6o30BXKrPQ5FoOn
"""

!pip install -q datasets torch tqdm

crowd = load_dataset("crows_pairs", split="test", trust_remote_code=True)
bias_types = set([ex["bias_type"] for ex in crowd])
print("CrowS-Pairs 可选偏见类型有：")
for bt in sorted(bias_types):
    print("-", bt)

from datasets import load_dataset


crowd = load_dataset("crows_pairs", split="test", trust_remote_code=True)

# 选择偏见类型，例如 'nationality'
DOMAIN = 4

# 过滤出该偏见类型的样本
domain_ds = [ex for ex in crowd if ex["bias_type"] == DOMAIN]


for i, ex in enumerate(domain_ds[:5]):
    print(f"\nExample {i+1}:")
    print("  Stereotype      :", ex["sent_more"])
    print("  Anti-stereotype :", ex["sent_less"])

from datasets import load_dataset
import torch
from transformers import AutoTokenizer, AutoModelForMaskedLM
from tqdm import tqdm

# 1. 设置偏见类型

crowd = load_dataset("crows_pairs", split="test", trust_remote_code=True)
DOMAIN = 4
domain_ds = crowd.filter(lambda ex: ex["bias_type"] == DOMAIN)

print(f"当前偏见类型：nationality，共 {len(domain_ds)} 个样本")

# 2. 定义模型列表（必须是 MLM 类型）
MODELS = {
    "bert-base-uncased": "bert-base-uncased",
    "roberta-base": "roberta-base"
}

# 3. 定义计算 pseudo-log-likelihood 的函数
def sentence_pll(model, tokenizer, sent):
    tokens = tokenizer(sent, return_tensors="pt")
    input_ids = tokens["input_ids"][0]
    pll = 0.0
    with torch.no_grad():
        for i in range(1, len(input_ids) - 1):  # 忽略 [CLS] 和 [SEP]
            masked = input_ids.clone()
            masked[i] = tokenizer.mask_token_id
            out = model(masked.unsqueeze(0)).logits[0, i]
            pll += out[input_ids[i]].item()
    return pll

# 4. 跑两个模型的实验
results = {}

for name, ckpt in MODELS.items():
    print(f"正在评估模型：{name}")
    tok = AutoTokenizer.from_pretrained(ckpt)
    mdl = AutoModelForMaskedLM.from_pretrained(ckpt).eval()
    prefer = 0  # 偏向“刻板句”的次数
    for ex in tqdm(domain_ds, desc=name):
        more, less = ex["sent_more"], ex["sent_less"]
        pll_more = sentence_pll(mdl, tok, more)
        pll_less = sentence_pll(mdl, tok, less)
        if pll_more > pll_less:
            prefer += 1
    percent = prefer / len(domain_ds) * 100
    results[name] = percent
    print(f"{name}: 偏向刻板印象句的比例为 {percent:.2f}%")

print("\n最终结果：")
for model, value in results.items():
    print(f"{model}: {value:.2f}% stereotypical preference")