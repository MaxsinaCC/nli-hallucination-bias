# -*- coding: utf-8 -*-
"""nli_eval.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nA0pOjk5zE309y8nDgbWiZR3HwOob32V
"""

!pip install transformers

from google.colab import files
uploaded = files.upload()

from transformers import pipeline
import json

# Load model
def load_model(model_name="facebook/bart-large-mnli"):
    return pipeline("text-classification", model=model_name)

# Load jsonl data
def load_nli_data(filepath):
    data = []
    with open(filepath, "r") as f:
        for line in f:
            d = json.loads(line)
            data.append((d["sentence1"], d["sentence2"], d["gold_label"]))
    return data

# Evaluate accuracy
def evaluate_nli(model, data):
    correct = 0
    total = 0
    for sentence1, sentence2, gold_label in data:
        prompt = f"{sentence1} \n\nQuestion: Does this imply that \"{sentence2}\"?\nAnswer:"
        result = model(prompt)[0]
        pred_label = result["label"].lower()
        if pred_label == gold_label.lower():
            correct += 1
        total += 1
    return correct / total

# 加载模型
model = load_model("facebook/bart-large-mnli")

# 加载 matched 数据集
matched_data = load_nli_data("dev_matched_sampled-1.jsonl")
matched_acc = evaluate_nli(model, matched_data)
print(f"[Matched] Accuracy: {matched_acc:.2%}")

# 加载 mismatched 数据集
mismatched_data = load_nli_data("dev_mismatched_sampled-1.jsonl")
mismatched_acc = evaluate_nli(model, mismatched_data)
print(f"[Mismatched] Accuracy: {mismatched_acc:.2%}")

from google.colab import drive
drive.mount('/content/drive')

matched_data = load_nli_data("dev_matched_sampled-1.jsonl")
matched_preds = []

for sentence1, sentence2, _ in matched_data:
    prompt = f"{sentence1} \n\nQuestion: Does this imply that \"{sentence2}\"?\nAnswer:"
    result = model(prompt)[0]
    matched_preds.append(result["label"].lower())

# 保存到 CSV
save_predictions(matched_data, matched_preds, filename="matched_results.csv")

# 下载
from google.colab import files
files.download("matched_results.csv")

matched_data = load_nli_data("dev_mismatched_sampled-1.jsonl")
matched_preds = []

for sentence1, sentence2, _ in matched_data:
    prompt = f"{sentence1} \n\nQuestion: Does this imply that \"{sentence2}\"?\nAnswer:"
    result = model(prompt)[0]
    matched_preds.append(result["label"].lower())

# 保存到 CSV
save_predictions(matched_data, matched_preds, filename="mismatched_results.csv")

# 下载
from google.colab import files
files.download("mismatched_results.csv")

from transformers import pipeline
from tqdm import tqdm
import json, torch

device = 0 if torch.cuda.is_available() else -1   # -1 表示 CPU
classifier = pipeline(
    task="text-classification",
    model="roberta-large-mnli",
    device=device,
    batch_size=32            # << 批量推理的关键！
)

def load_nli(file):
    data = []
    with open(file) as f:
        for j in f:
            d = json.loads(j)
            data.append((d["sentence1"], d["sentence2"], d["gold_label"]))
    return data

def evaluate(samples):
    """samples: list[(premise,hypothesis,label)] -> acc, predictions"""
    prompts = [f"{p}\n\nQuestion: Does this imply that \"{h}\"?\nAnswer:"
               for p,h,_ in samples]
    outputs = classifier(prompts)
    preds = [o["label"].lower() for o in outputs]
    acc   = sum(p == g for p, (_,_,g) in zip(preds, samples)) / len(samples)
    return acc, preds

# ======= 运行 =======
matched = load_nli("dev_matched_sampled-1.jsonl")
acc_m, preds_m = evaluate(matched)
print(f"[RoBERTa] Matched ACC: {acc_m:.2%}")

mismatched = load_nli("dev_mismatched_sampled-1.jsonl")
acc_mis, preds_mis = evaluate(mismatched)
print(f"[RoBERTa] Mismatched Accuracy: {acc_mis:.2%}")

import pandas as pd

def save_predictions(data, predictions, filename="results.csv"):
    df = pd.DataFrame({
        "premise": [p for p, _, _ in data],
        "hypothesis": [h for _, h, _ in data],
        "gold_label": [g for _, _, g in data],
        "predicted_label": predictions
    })
    df.to_csv(filename, index=False)
    print(f"Saved to {filename}")

save_predictions(matched, preds_m, filename="roberta_matched_results.csv")
files.download("roberta_matched_results.csv")

save_predictions(mismatched_data, preds_mis, filename="roberta_mismatched_results.csv")
files.download("roberta_mismatched_results.csv")